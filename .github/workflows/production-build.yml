name: Production Build

on:
  schedule:
    # * is a special character in YAML so you have to quote this string
    # TODO: Figure out what the best possible frequency should be!
    - cron:  '*/15 * * * *'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Setup Node.js environment
        uses: actions/setup-node@v2-beta
        with:
          node-version: "12"

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v1
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      # - name: Install all yarn packages
      #   run: yarn --frozen-lockfile

      # - name: Install Python
      #   if: steps.git_diff_content.outputs.diff
      #   uses: actions/setup-python@v2
      #   with:
      #     python-version: '3.8'

      # - name: Install Python poetry
      #   if: steps.git_diff_content.outputs.diff
      #   uses: dschep/install-poetry-action@v1.3

      # - name: Display Python & Poetry version
      #   if: steps.git_diff_content.outputs.diff
      #   run: |
      #     python --version
      #     poetry --version

      - name: Build everything
        run: |
          # Now is not the time to worry about flaws.
          export BUILD_FLAW_LEVELS="*:ignore"
          yarn build

          # TODO: When the deployer is available this is where we
          # would upload the whole content of client/build
          du -sh client/build
