name: Performance

on:
  pull_request_target:
    paths:
      - client/src/**
      - .github/workflows/performance.yml
      - package.json
      - yarn.lock

jobs:
  lighthouse:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: actions/checkout@v2
        with:
          repository: mdn/content
          path: mdn/content

      - name: Setup Node.js environment
        uses: actions/setup-node@v2.1.5
        with:
          node-version: "12"

      - name: Cache node_modules
        uses: actions/cache@v2.1.5
        id: cached-node_modules
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-${{ hashFiles('yarn.lock') }}

      - name: Install all yarn packages
        if: steps.cached-node_modules.outputs.cache-hit != 'true'
        env:
          PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: 1
        run: |
          yarn --frozen-lockfile

      - name: Build select important pages
        env:
          # Remember, the mdn/content repo got cloned into `pwd` into a
          # sub-folder called "mdn/content"
          CONTENT_ROOT: "${{ github.workspace }}/mdn/content/files"

          # Make sure it's set to something so that the build uses the
          # Google Analytics tag which is most realistic.
          BUILD_GOOGLE_ANALYTICS_ACCOUNT: UA-00000000-0
        run: |
          yarn prepare-build
          # BUILD_FOLDERSEARCH=mdn/kitchensink yarn build
          BUILD_FOLDERSEARCH=web/javascript/reference/global_objects/array/foreach yarn build

      - name: Serve sample built page
        run: |
          yarn start:static-server &
          sleep 1
          curl --retry-connrefused --retry 5 \
            http://localhost:5000/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach/ > /dev/null

      - name: Audit URLs using Lighthouse
        id: lighthouse_audit
        uses: treosh/lighthouse-ci-action@v7
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        with:
          urls: |
            http://localhost:5000/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach/
          # budgetPath: ./budget.json # test performance budgets
          runs: 1
          uploadArtifacts: true # save results as an action artifacts
          temporaryPublicStorage: true # upload lighthouse report to the temporary storage

      - name: Format lighthouse score
        id: format_lighthouse_score
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const result = ${{ steps.lighthouse_audit.outputs.manifest }}[0].summary
            const links = ${{ steps.lighthouse_audit.outputs.links }}
            const formatResult = (res) => Math.round((res * 100))
            Object.keys(result).forEach(key => result[key] = formatResult(result[key]))
            const score = res => res >= 90 ? 'üü¢' : res >= 50 ? 'üü†' : 'üî¥'
            const comment = [
                `‚ö°Ô∏è [Lighthouse report](${Object.values(links)[0]}) for the changes in this PR:`,
                '| Category | Score |',
                '| --- | --- |',
                `| ${score(result.performance)} Performance | ${result.performance} |`,
                `| ${score(result.accessibility)} Accessibility | ${result.accessibility} |`,
                `| ${score(result['best-practices'])} Best practices | ${result['best-practices']} |`,
                `| ${score(result.seo)} SEO | ${result.seo} |`,
                `| ${score(result.pwa)} PWA | ${result.pwa} |`,
                ' ',
                `*Lighthouse ran on <${Object.keys(links)[0]}>*`
            ].join('\n')
             core.setOutput("comment", comment);

      - name: Add Lighthouse stats as comment
        id: comment_to_pr
        uses: marocchino/sticky-pull-request-comment@v2.0.0
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          number: ${{ github.event.pull_request.number }}
          header: lighthouse
          message: ${{ steps.format_lighthouse_score.outputs.comment }}

      - name: Format static assets file sizes
        id: format_static_assets
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const script = require('./testing/scripts/static-assets-sizes.js')
            const comment = script({github, context})
            core.setOutput("comment", comment);

      - name: Add static assets stats as comment
        id: comment_to_pr2
        uses: marocchino/sticky-pull-request-comment@v2.0.0
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          number: ${{ github.event.pull_request.number }}
          header: static assets
          message: ${{ steps.format_static_assets.outputs.comment }}
